.grid {
  /* !Only allowed shape of grid is rectangle */

  /* fr unit
  used to distribute a fraction of the available space,
  using it for the size of grid-item, it becomes a flexible
  item and behaves much like a flex item does when it's 
  set to flex: 1 1 auto 
  */

  /* minmax()
  Setting a min-width and max-width to template columns and rows
  minmax(100px , 300px) / minmax(3em, 10em) / minmax(200px, 50%) / ... 
  If min is biger than max, grid will ignore it and use it as max value
  */

  /* !fr units can't be used as the min size for minmax() */

  display: grid;
  /* grid-template-columns: 200px 200px 200px; */
  grid-template-columns: 200px minmax(200px, 1fr) 1fr;
  grid-template-rows: 100px 100px 100px;

  /* SHORTHAND 
  grid-template: row / column;
  grid-template: 100px 100px 100px / 200px 200px 200px; 
  */

  /* !Gaps are added only inside of the grid */

  grid-column-gap: 2rem;
  grid-row-gap: 1rem;

  /* SHORTHAND
  grid-gap: row / column;
  grid-gap: 1rem / 2rem;
  */
}

.grid-item {
  background: #b823c1;
  color: white;
  padding: 1em 2em;
  border: 2px solid purple;
  display: flex;
  align-items: center;
  justify-content: center;
}

.green {
  background-color: green;

  grid-column-start: 2;
  grid-column-end: 4;

  /* SHORTHAND 
  grid-column: start / end;
  grid-column: 2 / 4; 
  */

  grid-row-start: 1;
  grid-row-end: 3;

  /* SHORTHAND 
  grid-row: start / end;
  grid-row: 1 / 3; 
  */
}

/* !Grid items can overlap each other if it's explicitely told */

.one {
  grid-column: 1 / 4; /* grid-column: 1 / span 3; */
  grid-row: 1 / 3;
}

.two {
  background: #ff5670;
  grid-column: 2 / span 2;
  grid-row: 2 / span 2;
}

/* GRID == FLEX? */

.grid-flex {
  display: grid;
  grid-template-columns: 3fr 3fr 4fr;

  /* justify-items: center; */
  /* align-items: center; */
}

.big {
  padding: 3rem 2rem;
  background-color: #ff5670;
}

.start {
  align-self: start;
  justify-self: start;
}

.end {
  align-self: end;
  justify-self: end;
}

/* EXPLICITE X IMPLICITE */

.grid-expl-impl {
  display: grid;
  /* this is explicite*/
  grid-template-rows: 50px 100px 200px;
  grid-template-columns: 3fr 5fr;

  /* 
  implicite rows and columns are default to auto,
  values of auto can be set for rows and columns
  */

  /* grid-auto-rows: 500px; */
  grid-auto-columns: 150px;
}

.implicite {
  background-color: lightblue;
  padding: 3rem 2rem;
  grid-column: 4/5; /* this is implicite*/
}

/* GRID AREAS */

/* (.) dot == ignore the cell */

.grid-area {
  display: grid;
  grid-template-columns: 5em auto 5em;
  grid-template-areas:
    "header header header"
    "...... sidebar ......"
    "...... content ....."
    "footer footer footer";
}

@media (width > 600px) {
  .grid-area {
    grid-template-columns: 100px minmax(150px, 250px) minmax(250px, 50%) 100px;
    grid-template-areas:
      "header header header header"
      "...... sidebar content ...."
      "footer footer footer footer";
  }
}

.header {
  grid-area: header;
}

.sidebar {
  grid-area: sidebar;
}

.content {
  padding: 3rem 2rem;
  background-color: lightsalmon;
  grid-area: content;
}

.footer {
  grid-area: footer;
}

/* GRID (ANOTHER) FEATURES */

.grid-functions {
  display: grid;
  /* repeat() is used when we have multiple columns that are the same width*/
  grid-template-columns: repeat(3, 1fr);

  /* auto-fill - will keep adding in new columns, even if they are empty */
  /* grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); */

  /* auto-fit - will fit the columns you have defined into the available space (simplified!) */
  /* grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); */

  gap: 1em;
  margin-bottom: 2em;
}
